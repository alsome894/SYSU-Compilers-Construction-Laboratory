import exceptions.*;
import java_cup.runtime.*;
import callgraph.*;
import java.util.*;

parser code {:
	public String currentProcedure;
	public int callee;
	public Vector<String> procedure;
	public Vector<String> callSites;
	public Vector<String> callEdges;
	public Vector<Node>	symbols;
	public CallGraph graph;
:}

init with {:
	callee = 1;
	graph = new CallGraph();
	procedure = new Vector<String>();
	callSites = new Vector<String>();
	callEdges = new Vector<String>();
	symbols = new Vector<Node>();
:}

scan with {:
	return getScanner().next_token();
:};

terminal PROCEDURE;
terminal MODULE;
terminal BEGIN;
terminal END;
terminal CONST;
terminal TYPE;
terminal VAR;
terminal RECORD;
terminal ARRAY;
terminal OF;
terminal WHILE;
terminal DO;
terminal IF;
terminal THEN;
terminal ELSIF;
terminal ELSE;
terminal INTEGER;
terminal BOOLEAN;
terminal DIV;
terminal MOD;
terminal OR;
terminal EQUAL;
terminal ASSIGNMENT;
terminal NOTEQUAL;
terminal LessThan;
terminal LessThanOrEqual;
terminal GreatThan;
terminal GreatThanOrEqual;
terminal PLUS;
terminal MINUS;
terminal NOT;
terminal TIMES;
terminal AND;
terminal SEMICOLON;
terminal POINT;
terminal COMMA;
terminal LeftBracket;
terminal RightBracket;
terminal LeftParenthesis;
terminal RightParenthesis;
terminal COLON;
terminal TRUE;
terminal FALSE;
terminal READ;
terminal WRITE;
terminal WRITELN;

terminal String	IDENTIFIER;
terminal String	NUMBER;

non terminal const_declarations;
non terminal type_declarations;
non terminal var_declarations;
non terminal const_list;
non terminal type_list;
non terminal var_list;
non terminal readwritestatement;
non terminal procedure_call;
non terminal assignment;
non terminal statement_sequence;
non terminal statement;
non terminal while_statement;
non terminal if_statement;
non terminal elsif_statement;
non terminal else_statement;

non terminal String	module;
non terminal String	module_body;
non terminal String	declarations;
non terminal String	procedure_declaration;
non terminal String	procedure_begin;
non terminal String	procedure_heading;
non terminal String	procedure_body;
non terminal String	format_parameters;
non terminal String	fp_section;
non terminal Vector<Node> identifier_list;
non terminal Node field_list;
non terminal Node record_type;
non terminal Node field_list_list;
non terminal Node array_type;
non terminal Node expression_list;
non terminal Node special_type;
non terminal Node expression;
non terminal Node actual_parameters;
non terminal Node selector;
non terminal Node simple_expression;
non terminal Node term;
non terminal Node term_list;
non terminal Node factor;
non terminal Node simple_expression_list;

precedence right ASSIGNMENT;
precedence left OR;
precedence left AND;
precedence right NOT;
precedence left LessThan, LessThanOrEqual, GreatThan, GreatThanOrEqual,EQUAL, NOTEQUAL ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left LeftParenthesis;


module ::= 	MODULE IDENTIFIER:id1 SEMICOLON declarations module_body END IDENTIFIER:id2 POINT
            {:
			    if (!id1.equals(id2))
				    throw new SemanticException();
			    int flag = 0;
			    /* call sites */
			    for (int i = 0; i < parser.callSites.size(); i++) {
				    String[] splitInformation = parser.callSites.elementAt(i).split("=");
				    parser.graph.addCallSite(splitInformation[0], splitInformation[1], splitInformation[2]);
			    }
			    /* edges */
			    for (int i = 0; i < parser.callEdges.size(); i++) {
				    String[] splitInformation = parser.callEdges.elementAt(i).split("=");
				    parser.graph.addEdge(splitInformation[0], splitInformation[1]);
			    }

			    /* Procedure match */
			    for (int i = 0; i < parser.callEdges.size(); i++) {
				    String[] splitEdges = parser.callEdges.elementAt(i).split("=");
				    boolean found = false;
				    for(int j = 0; j < parser.procedure.size(); j++) {
					    String[] splitProcedure = parser.procedure.elementAt(j).split("=");
					    if (splitEdges[1].equals(splitProcedure[0]))
						    found=true;
				    }
				    if (!found) throw new SemanticException();
			    }
			    /* Parameter*/
			    for (int i = 0; i < parser.callSites.size(); i++) {
				    String[] splitSites = parser.callSites.elementAt(i).split("=");

					//0 parameter
					if(splitSites.length == 3) {
						for(int j = 0; j < parser.procedure.size(); j++) {
							String[] splitProcedure = parser.procedure.elementAt(j).split("=");
							if ((splitSites[2]).substring(0, (splitSites[2].indexOf("("))).equals(splitProcedure[0])) {
								String parameters2 = splitProcedure[1].replace(",", "").replace(" ", "").replace("(", "").replace(")", "");
								if(parameters2.length() != 0) {
									throw new ParameterMismatchedException();
								}
							}
						}
					}
					//1 or more parameter
					else {
						for(int j = 0; j < parser.procedure.size(); j++) {
							String[] splitProcedure = parser.procedure.elementAt(j).split("=");
							if ((splitSites[2]).substring(0, (splitSites[2].indexOf("("))).equals(splitProcedure[0])) {
								String parameters1 = splitSites[3].replace(",", "").replace(" ", "");
								String parameters2 = splitProcedure[1].replace(",", "").replace(" ", "").replace("(", "").replace(")", "");
								if (!parameters1.equals(parameters2))
									throw new ParameterMismatchedException();
							}
						}
					}
			    }
			    parser.graph.show();
		    :}
        ;

declarations ::=  const_declarations type_declarations var_declarations procedure_declaration  {:  :}
               ;

procedure_declaration ::= {: parser.callee = 1; :}
                        |  procedure_declaration procedure_heading:head SEMICOLON procedure_body:body SEMICOLON
						   {:
							  if (!head.equals(body))
								  throw new SemanticException();
							  parser.currentProcedure = "";
							  parser.callee = 1;
				            :}
						;

procedure_heading ::=  PROCEDURE IDENTIFIER:procedureName format_parameters:formalParameters
                       {:
					       String newProcedure = new String(procedureName + "=" + "( " + formalParameters + " )");
						   parser.procedure.addElement(newProcedure);
						   parser.graph.addProcedure(procedureName, procedureName + "( " + formalParameters + " )");
						   parser.currentProcedure = procedureName;
						   parser.callee = 1;
						   RESULT = procedureName;
				       :}
					;

format_parameters ::=  {: RESULT = ""; :}
                    |  LeftParenthesis RightParenthesis {: RESULT = ""; :}
					|  LeftParenthesis fp_section:fp_sectionReturnString RightParenthesis {: RESULT = fp_sectionReturnString; :}
					|  fp_section:fp_sectionReturnString RightParenthesis {: if (true) throw new MissingLeftParenthesisException(); :}
					;

fp_section ::=	fp_section:fp SEMICOLON identifier_list: identifierListReturnParamentNum COLON special_type: typeStringReturnFromspecial_type
                {:
					for (int i = 0; i < identifierListReturnParamentNum.size(); i++) {
						RESULT = fp + ", " + typeStringReturnFromspecial_type.type;
					}
				:}
			 |  fp_section:fp SEMICOLON VAR identifier_list: identifierListReturnParamentNum COLON special_type: typeStringReturnFromspecial_type
			    {:
					for (int i = 0; i < identifierListReturnParamentNum.size(); i++) {
						RESULT = fp + ", " + typeStringReturnFromspecial_type.type;
					}
				:}
			 |  identifier_list : identifierListReturnParamentNum COLON special_type: typeStringReturnFromspecial_type
			    {:
					RESULT = "";
					for (int i = 0; i < identifierListReturnParamentNum.size(); i++) {
						RESULT += " " + typeStringReturnFromspecial_type.type;
					}
				:}
			 | 	VAR identifier_list: identifierListReturnParamentNum COLON special_type : typeStringReturnFromspecial_type
				{:
					RESULT = "";
					for (int i = 0; i < identifierListReturnParamentNum.size(); i++) {
						RESULT += " " + typeStringReturnFromspecial_type.type;
					}
 				:}
			 ;

special_type ::=  IDENTIFIER:identifier
				  {:
					  RESULT = new Node();
					  boolean found = false;
					  for (int i = 0; i < parser.symbols.size(); i++) {
						  if (parser.symbols.elementAt(i).name.equals(identifier)) {
							  RESULT.type = parser.symbols.elementAt(i).type;
							  found= true;
						  }
					  }
					  if (!found)
						  throw new SemanticException();
				  :}
			   |  INTEGER
				  {:
					 RESULT = new Node();
					 RESULT.type = "INTEGER";
				  :}
			   |  BOOLEAN
				  {:
				 	  RESULT = new Node();
					  RESULT.type = "BOOLEAN";
				  :}
			   |  record_type: recordToken
				  {:
				 	  RESULT = new Node(recordToken);
				  :}
			   |  array_type: arrayToken
				  {:
					  RESULT = new Node(arrayToken);
				  :}
			   ;

array_type ::=	ARRAY expression : expressionToken OF special_type :typeToken
                {:
			        RESULT = new Node();
			        RESULT.type= expressionToken.name  +"[" + typeToken.type +"]";
		        :}
			 ;

record_type ::=	 RECORD field_list:field_listTokne field_list_list: field_list_listToken END
                 {:
			        RESULT = new Node();
			        RESULT.type = field_listTokne.type +field_list_listToken.type;
		         :}
			  ;

field_list ::=	{:RESULT = new Node();:}
		     | 	identifier_list:identifierList COLON special_type: specialTypeToken
			    {:
					RESULT = new Node();
					for (int i = 0; i < identifierList.size(); i++) {
						RESULT.type += specialTypeToken.type;
						RESULT.name += identifierList.elementAt(i).name;
					}
			    :}
			 ;

field_list_list ::=	 {: RESULT = new Node(); :}
		          |  field_list_list : field_list_listToken SEMICOLON field_list : field_listToken
					 {:
						 RESULT = new Node();
						 RESULT.name = field_list_listToken.name + field_listToken.name;
						 RESULT.type = field_list_listToken.type + field_listToken.type;
					 :}
				  ;

identifier_list ::=	 IDENTIFIER : identifierName
					 {:
						 RESULT = new Vector<Node>();
						 RESULT.addElement(new Node(identifierName, ""));
					 :}
		          |  identifier_list : previerIndentifierListParamentNum COMMA IDENTIFIER: identifierName
				     {:
					     RESULT = previerIndentifierListParamentNum;
					     RESULT.addElement(new Node(identifierName, ""));
				     :}
                  ;


procedure_body ::=	declarations procedure_begin END IDENTIFIER: procedreName
		            {:
			             RESULT = procedreName;
		            :}
                 ;

procedure_begin ::=
		          |  BEGIN statement_sequence
                  ;

statement_sequence ::=	statement
		             |  statement_sequence SEMICOLON statement
                     ;

statement ::=  assignment
            |  procedure_call
            |  if_statement
            |  while_statement
            |  readwritestatement
            |
            ;

procedure_call ::=	IDENTIFIER: procedureName actual_parameters: actualParameters
		            {:
			            if (parser.callee == 1 && parser.currentProcedure.isEmpty()) {
				            parser.currentProcedure = "Main";
				            parser.graph.addProcedure("Main", "Main( )");
				            String newProcedure = new String(parser.currentProcedure + "=" + "( "  + " )");
				            parser.procedure.addElement(newProcedure);
			            }
			            parser.callSites.addElement(new String(parser.currentProcedure + parser.callee + "=" + parser.currentProcedure + "( )" + "=" + procedureName + "( " + actualParameters.name + ")" + "=" + actualParameters.type));
			            parser.callEdges.addElement(new String(parser.currentProcedure + parser.callee + "=" + procedureName));
			            parser.callee++;
		            :}
                 ;

actual_parameters::=  {: RESULT = new Node(); :}
                   |  LeftParenthesis expression_list:parameters RightParenthesis {: RESULT = new Node(parameters); :}
                   ;

expression_list ::=	 {: RESULT = new Node(); :}
                  |  expression:expressionToken {: RESULT =new Node(expressionToken); :}
                  |  expression_list: expressionNameList COMMA expression:expressionToken
                     {:
                         RESULT = new Node();
                         RESULT.name = expressionNameList.name + "," + expressionToken.name;
				         RESULT.type = expressionNameList.type + " " + expressionToken.type;
			         :}
                  ;

expression ::=  simple_expression :simpleExpressionToken
                {:
				    RESULT = new Node();
				    RESULT.name = simpleExpressionToken.name;
				    RESULT.type = simpleExpressionToken.type;
			    :}
		     |  simple_expression :simpleExpressionToken simple_expression_list :simpleExpressionListToken
                {:
				    if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					    throw new TypeMismatchedException();
				    }
				    RESULT = new Node();
				    RESULT.name = simpleExpressionToken.name + simpleExpressionListToken.name;
				    RESULT.type = "BOOLEAN";
			    :}
             ;

simple_expression_list ::=  EQUAL simple_expression : simpleExpressionToken
			                {:
				                if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					                throw new TypeMismatchedException();
				                }
				                RESULT = new Node();
				                RESULT.name = "=" + simpleExpressionToken.name;
				                RESULT.type = "BOOLEAN";
			                :}
		                 |  EQUAL
			                {:
				                if (true) throw new MissingOperandException();
			                :}
		                 |  NOTEQUAL simple_expression :simpleExpressionToken
			                {:
					          	if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					                throw new TypeMismatchedException();
					       	    }
			                    RESULT = new Node();
				                RESULT.name = "#" + simpleExpressionToken.name;
				                RESULT.type = "BOOLEAN";
			                :}
		                 |  NOTEQUAL
			                {:
				                if (true) throw new MissingOperandException();
			                :}
		                 |  LessThan simple_expression :simpleExpressionToken
			                {:
				                if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					                throw new TypeMismatchedException();
				                }
				                RESULT = new Node();
				                RESULT.name = "<" + simpleExpressionToken.name;
				                RESULT.type = "BOOLEAN";
			               :}
		                 |  LessThan
			                {:
				                if (true) throw new MissingOperandException();
			                :}
		                 |  LessThanOrEqual  simple_expression :simpleExpressionToken
			                {:
				                if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					                throw new TypeMismatchedException();
				                }
				                RESULT = new Node();
				                RESULT.name = "<=" + simpleExpressionToken.name;
				                RESULT.type = "BOOLEAN";
			                :}
		                 |  LessThanOrEqual
			                {:
				                if (true) throw new MissingOperandException();
			                :}
		                 |  GreatThan simple_expression :simpleExpressionToken
			                {:
				                if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					                throw new TypeMismatchedException();
				                }
				                RESULT = new Node();
				                RESULT.name = ">" + simpleExpressionToken.name;
				                RESULT.type = "BOOLEAN";
			                :}
		                 |  GreatThan
			                {:
				                if (true) throw new MissingOperandException();
			                :}
		                 |  GreatThanOrEqual  simple_expression :simpleExpressionToken
			                {:
				                if ((simpleExpressionToken.type.indexOf("INTEGER") == -1 && simpleExpressionToken.type.indexOf("ARRAY") == -1 && simpleExpressionToken.type.indexOf("RECORD") == -1)) {
					                throw new TypeMismatchedException();
				                }
				                RESULT = new Node();
				                RESULT.name = ">=" + simpleExpressionToken.name;
				                RESULT.type = "BOOLEAN";
			                :}
		                 |  GreatThanOrEqual
			                {:
				                if (true) throw new MissingOperandException();
			                :}
                         ;

simple_expression ::=  /*["+" | "-"] term {("+" | "-" | "OR") term} */
                       term : termToken  term_list : termListToken
				       {:
					       RESULT = new Node();
					       RESULT.name = termToken.name + termListToken.name;
					       RESULT.type = termToken.type;
				       :}
			        |  PLUS term : termToken term_list : termListToken
				       {:
					       if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                               || (termListToken.type.indexOf("INTEGER") == -1 && termListToken.type.indexOf("ARRAY") == -1 && termListToken.type.indexOf("RECORD") == -1)) {
						       throw new TypeMismatchedException();
					       }
					       RESULT = new Node();
					       RESULT.name = "+" + termToken.name + termListToken.name;
					       RESULT.type = termToken.type;
				       :}
			        |  MINUS term : termToken term_list: termListToken
				       {:
					       if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                               || (termListToken.type.indexOf("INTEGER") == -1 && termListToken.type.indexOf("ARRAY") == -1 && termListToken.type.indexOf("RECORD") == -1)) {
						       throw new TypeMismatchedException();
					       }
					       RESULT = new Node();
					       RESULT.name = "-" + termToken.name + termListToken.name;
					       RESULT.type = termToken.type;
				       :}
                    ;

term ::=  factor : factorToken  {: RESULT = new Node(factorToken); :}
	   |  term : termToken TIMES factor : factorToken
		  {:
			  if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                  || (factorToken.type.indexOf("INTEGER") == -1 && factorToken.type.indexOf("ARRAY") == -1 && factorToken.type.indexOf("RECORD") == -1)) {
				  throw new TypeMismatchedException();
			  }
			  RESULT = new Node();
			  RESULT.name = termToken.name + "*" + factorToken.name;
			  RESULT.type = "INTEGER";
		  :}
	   |  term: termToken DIV factor: factorToken
		  {:
			  if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                  || (factorToken.type.indexOf("INTEGER") == -1 && factorToken.type.indexOf("ARRAY") == -1 && factorToken.type.indexOf("RECORD") == -1)) {
				  throw new TypeMismatchedException();
			  }
			  RESULT = new Node();
			  RESULT.name = termToken.name + "/" +factorToken.name;
			  RESULT.type = "INTEGER";
		  :}
	   |  term: termToken MOD factor : factorToken
		  {:
			  if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                  || (factorToken.type.indexOf("INTEGER") == -1 && factorToken.type.indexOf("ARRAY") == -1 && factorToken.type.indexOf("RECORD") == -1)) {
				  throw new TypeMismatchedException();
			  }
			  RESULT = new Node();
			  RESULT.name = termToken.name + "MOD" + factorToken.name;
			  RESULT.type = "INTEGER";
		  :}
	    |  term: termToken AND factor: factorToken
		   {:
			   if (   (termToken.type.indexOf("BOOLEAN") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                   || (factorToken.type.indexOf("BOOLEAN") == -1 && factorToken.type.indexOf("ARRAY") == -1 && factorToken.type.indexOf("RECORD") == -1)) {
				   throw new TypeMismatchedException();
			   }
			   RESULT = new Node();
			   RESULT.name = termToken.name + "AND" +factorToken.name;
			   RESULT.type = "BOOLEAN";
		   :}
	    |  TRUE
		   {:
		       RESULT = new Node("", "BOOLEAN");
		   :}
	    |  FALSE
		   {:
			   RESULT = new Node("", "BOOLEAN");
		   :}
        ;

term_list ::=  {: RESULT = new Node(); :}
		    |  term_list: termListToken  PLUS term : termToken
			   {:
				   if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                       || (termListToken.type.indexOf("INTEGER") == -1 && termListToken.type.indexOf("ARRAY") == -1 && termListToken.type.indexOf("RECORD") == -1) && termListToken.type != "") {
				       throw new TypeMismatchedException();
				   }
				   RESULT = new Node();
				   RESULT.name = termListToken.name + "+" +termToken.name;
				   RESULT.type = termToken.type;
			   :}
		    |  term_list: termListToken  PLUS END
			   {:
				   if (true) throw new MissingOperandException();
			   :}
		    |  term_list: termListToken MINUS term: termToken
			   {:
				   if (   (termToken.type.indexOf("INTEGER") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                       || (termListToken.type.indexOf("INTEGER") == -1 && termListToken.type.indexOf("ARRAY") == -1 && termListToken.type.indexOf("RECORD") == -1) && termListToken.type != "") {
					   throw new TypeMismatchedException();
				   }
				   RESULT = new Node();
				   RESULT.name = termListToken.name + "-" +termToken.name;
				   RESULT.type = termToken.type;
			   :}
		    |  term_list: termListToken OR term: termToken
			   {:
				   if (   (termToken.type.indexOf("BOOLEAN") == -1 && termToken.type.indexOf("ARRAY") == -1 && termToken.type.indexOf("RECORD") == -1)
                       || (termListToken.type.indexOf("BOOLEAN") == -1 && termListToken.type.indexOf("ARRAY") == -1 && termListToken.type.indexOf("RECORD") == -1) && termListToken.type != "") {
					   throw new TypeMismatchedException();
				   }
				   RESULT = new Node();
				   RESULT.name = termListToken.name + "OR" +termToken.name;
				   RESULT.type = termToken.type;
			   :}
            ;

factor ::=  IDENTIFIER: identifier selector: selectorValue
            {:
				RESULT = new Node();
				if (selectorValue.type == "") {
					RESULT.name = identifier;
					RESULT.type = "INTEGER";
				} else {
					RESULT.name = identifier + selectorValue.name;
					RESULT.type = selectorValue.type;
				}
            :}
         |  NUMBER :number
            {:
				RESULT = new Node(number, "INTEGER");
			:}
         |  LeftParenthesis expression:expressionToken RightParenthesis
            {:
				RESULT = new Node();
				RESULT.name = "(" + expressionToken.name + ")";
				RESULT.type = expressionToken.type;
			:}
         |  LeftParenthesis expression:expressionToken 	END
            {:
				if (true) throw new MissingRightParenthesisException();
			:}
         |  NOT factor : factorToken
            {:
				if (factorToken.type != "BOOLEAN" && factorToken.type != "ARRAY" && factorToken.type != "RECORD")
					throw new TypeMismatchedException();
				RESULT = new Node();
				RESULT.name = "~" + factorToken.name;
				RESULT.type = factorToken.type;
			:}
         |  NUMBER NUMBER
            {:
				if (true) throw new MissingOperatorException();
			:}
         |  IDENTIFIER IDENTIFIER
            {:
				if (true) throw new MissingOperatorException();
			:}
         ;

selector ::=  selector : previerSelectorName  POINT IDENTIFIER: selectorIndetifier
              {:
			      RESULT = new Node();
			      RESULT.name += previerSelectorName.name + "." + selectorIndetifier;
			      RESULT.type = "RECORD" ;
		      :}
           |  selector : previerSelectorName LeftBracket expression : expressionToken RightBracket
              {:
			      RESULT = new Node();
			      RESULT.name += previerSelectorName.name + "[" + expressionToken.name + "]";
			      RESULT.type = "ARRAY" ;
		      :}
           |  {: RESULT = new Node("", ""); :}
           ;

const_declarations ::=
                     | CONST const_list
                     ;

const_list	::=	 const_list IDENTIFIER:identifierName EQUAL expression:expressionToken SEMICOLON
                 {:
			         parser.symbols.addElement(new Node(identifierName, expressionToken.type));
                 :}
              |
              ;

type_declarations ::=
                    |  TYPE type_list
                    ;

type_list ::=  type_list IDENTIFIER:identifier EQUAL special_type:typeToken SEMICOLON
               {:
				   parser.symbols.addElement(new Node(identifier, typeToken.type));
               :}
            |
            ;

var_declarations ::=  VAR var_list
                   |
                   ;

var_list ::=  var_list identifier_list:identifierList COLON special_type:typeToken SEMICOLON
              {:
				  for (int i = 0; i < identifierList.size(); i++)
					  parser.symbols.addElement(new Node(identifierList.elementAt(i).name, typeToken.type));
			  :}
           |
           ;

module_body ::=	 BEGIN statement_sequence
              |
              ;

readwritestatement ::=	READ LeftParenthesis RightParenthesis {: if (true) throw new MissingOperandException(); :}
                     |  READ {: if (true) throw new MissingLeftParenthesisException(); :}
                     |  READ LeftParenthesis expression:expressionToken RightParenthesis
                     |  READ IDENTIFIER RightParenthesis {: if (true) throw new MissingLeftParenthesisException(); :}
                     |  READ LeftParenthesis IDENTIFIER {: if (true) throw new MissingRightParenthesisException(); :}
                     |  WRITE {: if (true) throw new MissingLeftParenthesisException(); :}
                     |  WRITE IDENTIFIER RightParenthesis {: if (true) throw new MissingLeftParenthesisException(); :}
                     |  WRITE LeftParenthesis IDENTIFIER {: if (true) throw new MissingRightParenthesisException(); :}
                     |  WRITE LeftParenthesis RightParenthesis {: if (true) throw new MissingOperandException(); :}
                     |  WRITE LeftParenthesis expression:expressionToken RightParenthesis
                     |  WRITELN {: if (true) throw new MissingLeftParenthesisException(); :}
                     |  WRITELN IDENTIFIER RightParenthesis {: if (true) throw new MissingLeftParenthesisException(); :}
                     |  WRITELN LeftParenthesis IDENTIFIER {: if (true) throw new MissingRightParenthesisException(); :}
                     |  WRITELN LeftParenthesis RightParenthesis {: if (true) throw new MissingOperandException(); :}
                     |  WRITELN LeftParenthesis expression:expressionToken RightParenthesis
                     ;

if_statement ::=  IF expression:expressionToken THEN statement_sequence elsif_statement else_statement END
               ;

elsif_statement ::=
		          |  elsif_statement ELSIF expression:expressionToken THEN statement_sequence
                  ;

else_statement ::=
                 |  ELSE statement_sequence
                 ;

while_statement ::=  WHILE expression:expressionToken DO statement_sequence END
                  ;

assignment ::=	IDENTIFIER:identifier selector:selectorName ASSIGNMENT expression:expressionToken
		        {:
			        boolean found = false;
					/*
			        for (int i = 0; i < parser.symbols.size(); i++) {
				        if (parser.symbols.elementAt(i).name.equals(identifier))
					        if (parser.symbols.elementAt(i).type != expressionToken.type)
						        throw new TypeMismatchedException();
			        }
					*/
		        :}
             ;
